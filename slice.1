.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH SLICE 1 "EN" "12/Dec/97" "Ralf S. Engelschall"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Slice -- Extract pre-defined slices from an ASCII file
.SH "SYNOPSIS"
\fBslice\fR
[\fB\-v\fR]
[\fB\-o\fR \fIsliceterm\fR:\fIoutputfile\fR[@\fIchmodcmd\fR] ..]
[\fIinputfile\fR]
.PP
\fBslice\fR
[\fB\-V\fR]
[\fB\-h\fR]
.SH "DESCRIPTION"
.Sh "Input Principle"
The \fIslice\fR program reads \fIinputfile\fR (or from \fI\s-1STDIN\s0\fR if \fIinputfile\fR is
not given or equal ``\f(CW-\fR'') and divides its already prepared \s-1ASCII\s0 contents
into possibly overlapping areas, called \fIslices\fR.   These slices are
determined by enclosing blocks defined by begin and end delimiters which have
to be \fIalready\fR in the file. These block delimiters use the syntax
.PP
.Vb 1
\&  [NAME: ... :NAME]
.Ve
or alternatively (if there is no misinterpretation possible, i.e. no
overlapping or stacked slices)
.PP
.Vb 1
\&  [NAME: ... :]
.Ve
There can be as many such slice definitions as you like and there can be more
than one slice with the same name. The resulting slice is the union of all
equal named slices. Actually use this to spread a big slice over disjunct
peaces of \fIinputfile\fR.
.Sh "Output Selection Scheme"
The final output data gets calculated by a slice term consisting of slice
names and set theory operators. The following syntax is recognized (in order
of \fI\s-1LR\s0\fR\|(1) grammar parsing) for slice terms:
.Ip "\s-1SLICE_TERM\s0 ::= \f(CWNAME\fR" 5
The slice \s-1NAME\s0 itself.
.Ip "\s-1SLICE_TERM\s0 ::= \f(CW!NAME\fR | \f(CW~NAME\fR" 5
The \fBcomplement\fR of slice \s-1NAME\s0 (i.e. \s-1ALL\s0\eNAME). 
.Sp
In formula: {x in \s-1ALL\s0: x \fBnot\fR in \s-1NAME\s0}
.Ip "\s-1SLICE_TERM\s0 ::= \f(CWNAME1xNAME2\fR, \f(CWNAME1^NAME2\fR" 5
The \fBexclusive-or\fR relation between slice \s-1NAME1\s0 and slice \s-1NAME2\s0. In set theory
also called \fBsymmetric difference\fR: (NAME1uNAME2)\e(NAME1nNAME2) or alternatively
(NAME1n!\s-1NAME2\s0)\fIu\fR\|(!NAME1nNAME2). 
.Sp
In formula: {x in \s-1ALL\s0: (x in \s-1NAME1\s0 or x in \s-1NAME2\s0) and not (x in \s-1NAME1\s0 and x in
\s-1NAME2\s0)}.
.Ip "\s-1SLICE_TERM\s0 ::= \f(CWNAME1\eNAME2\fR, \f(CWNAME1-NAME2\fR" 5
The \fBdifference\fR of slice \s-1NAME1\s0 and slice \s-1NAME2\s0, i.e. \s-1NAME1\s0 minus \s-1NAME2\s0.
.Sp
In formula: {x in \s-1ALL\s0: x in \s-1NAME1\s0 \fBand\fR x \fBnot\fR in \s-1NAME2\s0}
.Ip "\s-1SLICE_TERM\s0 ::= \f(CWNAME1nNAME2\fR | \f(CWNAME1*NAME2\fR" 5
The \fBintersection\fR of slice \s-1NAME1\s0 and slice \s-1NAME2\s0.
.Sp
In formula: {x in \s-1ALL\s0: x in \s-1NAME1\s0 \fBand\fR x in \s-1NAME2\s0}
.Ip "\s-1SLICE_TERM\s0 ::= \f(CWNAME1uNAME2\fR, \f(CWNAME1+NAME2\fR" 5
The \fBunion\fR of slice \s-1NAME1\s0 and slice \s-1NAME2\s0.
.Sp
In formula: {x in \s-1ALL\s0: x in \s-1NAME1\s0 \fBor\fR x in \s-1NAME2\s0}
.Ip "\s-1SLICE_TERM\s0 ::= \f(CW(\fR \s-1SLICE_TERM\s0 \f(CW)\fR" 5
A grouped slice term. Use this to force a different order of evaluation.
.Sh "Advanced Selection: Slice Levels"
Because slices can be overlapping and stacked, a definition level is assigned
to each slice while the input is parsed. These levels range from 1 to the
maximum encountered (the level 0 is the whole file, i.e. \f(CWALL\fR).  When a
slice begins, it is assigned the lowest free level, beginning with level 1. As
long as one level is in use, it cannot be assigned again until the end
delimiter of the corresponding slice is seen. 
.PP
An example:
.PP
.Vb 1
\&     [A:[B::B]:A][C:[D:[E::C]:D][F::E]:F]
.Ve
.Vb 4
\&  3                     E-----------E
\&  2      B--B        D--------D 
\&  1   A--------A  C--------C     F-----F
\&  0 
.Ve
Here slice A is assigned level 1. Then B is assigned level 2 because level 1
is still in use by A. Then the end of B is reached, level 2 is freed.  Then
the end of A is reached and level 1 is also free now, so C is assigned level 1
again. Now only level 1 is in use, so D is assigned level 2. Then E is
assigned level 3. Then the end of C is seen and level 1 freed. Then the end of
D is seen and level 2 is freed. Now F begins and because only level 3 is in
use, it gets level 1 assigned. Then the end of E frees level 3 and the end of
F frees level 1. Finally no levels are still in use. This indicates that the
slicing is correct. 
.PP
If there are any used levels left at the end of this process this indicates an
input error and \fIslice\fR responds with an error message displaying the still
open slices.
.PP
This complicated level mechanism is needed for granular set operations where
particular slices should be included or excluded only. So, to make life
easier, a few pseudo-slices are automatically defined:
.Ip "\f(CWDEFn\fR" 5
The union of all user-defined slices at exactly level n (0 <= n <= oo).
.Ip "\f(CWUNDEFn\fR" 5
The union of all \fBnon\fR\-user-defined slices at exactly level n (0 <= n <= oo).
This actually is just \f(CW!DEFn\fR.
.Ip "\f(CWDEF\fR" 5
The union of all user-defined slices at \fBall\fR levels, beginning at level
\fB1\fR.  This actually is the union of all \f(CWDEFn\fR slices.
.Ip "\f(CWUNDEF\fR" 5
The union of all \fBnon\fR\-user-defined slices at \fBall\fR levels, beginning with
\fB1\fR. This actually is just \f(CW!DEF\fR.
.Ip "\f(CWALL\fR" 5
The whole file. This actually is just \f(CWUNDEF0\fR, because at level 0 there are
no user defined slices, so all is undefined.
.Ip "\fI\s-1NAME\s0\fR\f(CW@\fR" 5
This is the slice \fI\s-1NAME\s0\fR minus the union of all \f(CWDEFn\fR slices with \fImin\fR\|(\s-1NAME\s0)
<= n <= oo. Here \fImin\fR\|(\s-1NAME\s0) is the the lowest level plus one where \fI\s-1NAME\s0\fR ever
occurred.  You can read this as ``\s-1NAME\s0 without all other slices at higher
levels which overwrite it'\*(R'. \fBThis sounds a little bit crazy, but actually is
the most important construct. Try to understand it or your slice terms become
very complicated\fR.
.SH "OPTIONS"
.Ip "[\fB\-o\fR \fIsliceterm\fR:\fIoutputfile\fR[@\fIchmodcmd\fR] ..]" 5
This redirects the output to a file. Usually the whole file will be send to
\f(CWSTDOUT\fR (same as \f(CWALL:-\fR). You can use this option \fImore than once\fR to
output to more than one file while the corresponding \fIsliceterm\fR determines
which output data will be included into each output file. 
.Sp
The optional \fIchmodcmd\fR string is intended for specifying options for the
\fIchmod\fR command, which is applied to \fIoutputfile\fR after writing. For
instance use ``\f(CWa+r\fR'\*(R' to make sure the file is readable by a webserver of
``\f(CWu+x\fR'\*(R' to create a file with the execution bit set (usually used for \s-1SSI\s0
files on a webserver with the \f(CWXBitHack\fR option available).
.Ip "\fB\-v\fR" 5
This sets verbose mode where some processing information will be given on the
console for debugging purpose.
.Ip "\fB\-V\fR" 5
Displays the version identification string.
.Ip "\fB\-h\fR" 5
Displays the usage page.
.SH "SPECIAL FEATURE"
Sometimes it can be very useful to be able to provide command line options
directly within the input file, for instance to setup one or more \fB\-o\fR
options. For this \fIslice\fR recognizes lines of the form
.PP
.Vb 1
\&   %!slice OPTIONS
.Ve
in the input file and automatically adds OPTIONS to the argument line options.
These lines have to start in column 0.
.PP
Example:
.PP
.Vb 1
\&   %!slice -oTOC:contents.txt
.Ve
.SH "EXAMPLE"
Assume the following simple multi-language article file \fIarticle.src\fR,
written in HTML:
.PP
.Vb 5
\&  <html>
\&  <head>
\&  <title>[EN:Titlepage:][DE:Titelseite:]</title>
\&  </head>
\&  <body>
.Ve
.Vb 3
\&  <center>
\&  <h1>[EN:The Title itself:][DE:Der Titel selbst:]</h1>
\&  </center>
.Ve
.Vb 4
\&  <blockquote>
\&  [EN:...English Abstract...:]
\&  [DE:...Deutsche Zusammenfassung...:]
\&  </blockquote>
.Ve
.Vb 2
\&  [EN:...English Text...:]
\&  [DE:...Deutscher Text...:]
.Ve
.Vb 2
\&  </body>
\&  </html>
.Ve
The command 
.PP
.Vb 1
\&  slice -o ENuUNDEF:article.html.en -o DEuUNDEF:article.html.de
.Ve
then creates the following to files:
.Ip "\fIarticle.html.en\fR:" 5
.Sp
.Vb 5
\&  <html>
\&  <head>
\&  <title>Titlepage</title>
\&  </head>
\&  <body>
.Ve
.Vb 3
\&  <center>
\&  <h1>The Title itself</h1>
\&  </center>
.Ve
.Vb 3
\&  <blockquote>
\&  ...English Abstract...
\&  </blockquote>
.Ve
.Vb 3
\&  ...English Text...
\&  </body>
\&  </html>
.Ve
.Ip "\fIarticle.html.de\fR:" 5
.Sp
.Vb 5
\&  <html>
\&  <head>
\&  <title>Titelseite</title>
\&  </head>
\&  <body>
.Ve
.Vb 3
\&  <center>
\&  <h1>Der Titel selbst</h1>
\&  </center>
.Ve
.Vb 3
\&  <blockquote>
\&  ...Deutsche Zusammenfassung...
\&  </blockquote>
.Ve
.Vb 3
\&  ...Deutscher Text...
\&  </body>
\&  </html>
.Ve
.SH "RESTRICTION"
The current implementation only handles anonymous end delimiters ``\f(CW:]\fR'\*(R'
correct in clear cases where no mis-interpretation is possible, i.e. when no
overlapping occurs. For instance in
.PP
.Vb 1
\&   ...[A:...[B:...:A]...:]...
.Ve
the end delimiter is not correctly assign to the `B\*(R' slice. So, be careful
when using anonymous end delimiters in overlapping situations. Pure stacking
like
.PP
.Vb 1
\&   ...[A:...[B:...:]...:]...
.Ve
is allowed and handled correctly, but only when you interpret this as
.PP
.Vb 1
\&   ...[A:...[B:...:B]...:A]...
.Ve
.SH "AUTHOR"
.PP
.Vb 3
\&  Ralf S. Engelschall
\&  rse@engelschall.com
\&  www.engelschall.com
.Ve

.rn }` ''
.IX Title "SLICE 1"
.IX Name "Slice - Extract pre-defined slices from an ASCII file"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "Input Principle"

.IX Subsection "Output Selection Scheme"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CWNAME\fR"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CW!NAME\fR | \f(CW~NAME\fR"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CWNAME1xNAME2\fR, \f(CWNAME1^NAME2\fR"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CWNAME1\eNAME2\fR, \f(CWNAME1-NAME2\fR"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CWNAME1nNAME2\fR | \f(CWNAME1*NAME2\fR"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CWNAME1uNAME2\fR, \f(CWNAME1+NAME2\fR"

.IX Item "\s-1SLICE_TERM\s0 ::= \f(CW(\fR \s-1SLICE_TERM\s0 \f(CW)\fR"

.IX Subsection "Advanced Selection: Slice Levels"

.IX Item "\f(CWDEFn\fR"

.IX Item "\f(CWUNDEFn\fR"

.IX Item "\f(CWDEF\fR"

.IX Item "\f(CWUNDEF\fR"

.IX Item "\f(CWALL\fR"

.IX Item "\fI\s-1NAME\s0\fR\f(CW@\fR"

.IX Header "OPTIONS"

.IX Item "[\fB\-o\fR \fIsliceterm\fR:\fIoutputfile\fR[@\fIchmodcmd\fR] ..]"

.IX Item "\fB\-v\fR"

.IX Item "\fB\-V\fR"

.IX Item "\fB\-h\fR"

.IX Header "SPECIAL FEATURE"

.IX Header "EXAMPLE"

.IX Item "\fIarticle.html.en\fR:"

.IX Item "\fIarticle.html.de\fR:"

.IX Header "RESTRICTION"

.IX Header "AUTHOR"

